/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */

/* Hello world */
task hello {
  doLast {
    println 'Hello World!'
  }
}

/* Build scripts are code */
task upper {
  doLast {
    String someString = 'mY_nAmE'
    println "Original: $someString"
    println "Upper case: ${someString.toUpperCase()}"
  }
}
task count {
  doLast {
    4.times {
      print "$it "
    }
  }
}

/* Task dependencies */
task intro {
    dependsOn 'hello'
    doLast {
      println "I'm Gradle"
    }
}
task taskX {
  dependsOn 'taskY'
  doLast {
    println 'taskX'
  }
}
task taskY {
  doLast {
    println 'taskY'
  }
}

/* Dynamic tasks */
4.times { counter ->
  task "task$counter" {
    doLast {
      println "I'm task number $counter"
    }
  }
}
task0.dependsOn task2, task3

/* Groovy DSL shortcut notations */
hello.doLast {
  println "Greetings from the $hello.name task."
}

/* Extra task properties */
task myTask {
  ext.myProperty = "myValue"
}
task printTaskProperties {
  doLast {
    println myTask.myProperty
  }
}

/* Default tasks */
defaultTasks 'clean', 'run'
task clean {
  doLast {
    println 'Default Cleaning!'
  }
}
task run {
  doLast {
    println 'Default Running!'
  }
}
task other {
  doLast {
    println "I'm not a default task!"
  }
}

/* Configure by DAG */
task distribution {
  doLast {
    println "We build the zip with version=$version"
  }
}
task release {
  dependsOn 'distribution'
  doLast {
    println 'We release now'
  }
}
gradle.taskGraph.whenReady { taskGraph ->
  if (taskGraph.hasTask(":release")) {
    version = '1.0'
  } else {
    version = '1.0-SNAPSHOT'
  }
}

/* External dependencies for the build script */
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath group: 'commons-codec',
    name: 'commons-codec',
    version: '1.2'
  }
}
import org.apache.commons.codec.binary.Base64
task encode {
  doLast {
    def byte[] encodedString = new Base64().encode('hello world\n'.getBytes())
    println new String(encodedString)
  }
}